Challenge #1

Create a script that takes an argument and tests if it's a file or not.
    $ vim validateFile.sh

	#!/bin/bash
	
	if [[ -f $1 ]]
	then
	    echo "Normal file"
	else
	    echo "Error: Not a file."
	fi
 

Challenge #2

Consider the solution from the previous challenge. Change it so that it tests if the script is run with exactly one argument.
    # vim validateFile.sh

	#!/bin/bash

	if [[ $# -eq 1 ]]
	then
        	if [[ -f $1 ]]
	        then
        	        echo "Normal file"
	        else
	                echo "Error: Not a file."
	        fi
	else
	        echo "Error: multiple files not allowd"
	fi


Challenge #3

Create a script that clears the contents of a text file which is the scriptâ€™s argument.
Test that the argument is a file.
    $ vim clearFile.sh
	
	#!/bin/bash

	if [[ -f $1 ]]
	then
        	cat /dev/null > $1
	else
	        echo "Error: Not a file."
	fi

 
Challenge #4

Create a script that drops the packets from an IP address given by the user.
Example: The command to drop the packets from 100.0.0.1 is: iptables -I INPUT -s 100.0.0.1 -j DROP
Run the script as root and test the connection to different IP addresses.

    $ vim dropIPs.sh
	
	#!/bin/bash

	read -p "Enter the IP address to drop: " ip
	sudo iptables -I INPUT -s $ip -j DROP
 

Challenge #5

Change the solution from the previous challenge so that the IP address is given as the first argument of the script. 
Test that the script is run with exactly one argument.

    $ vim dropIPs.sh
|	
	#!/bin/bash

	if [[ $# -eq 1 ]]
	then
		sudo iptables -I INPUT -s $1 -j DROP
 	else
		echo "Only 1 parameter is allowed (IP address)"
	fi


Challenge #6

Develop a script that appends to a file the currently logged-in users and the current date and time.

     $ vim logged-users.sh

	#!/bin/bash
	echo "##################" >> users_log.txt
	date +%D_%H:%M >> users_log.txt
	who >> users_log.txt
 	cat users_log.txt


Challenge #7

Create a script that prompts the user for a character.
If the character is Y, display "YES". If the character is N, display "NO". Use double quotes when displaying YES and NO.  If the user enters any other character exit the script.

    $ vim yesOrNo.sh
	#!/bin/bash

	read -p "Choose an option (y/n): " option
	case "$option" in
	        Y|y)
	                echo "\"YES\""
	                ;;
	        N|n)
	                echo "\"NO\""
	                ;;
	        *)
	                echo "Wrong option, exiting"
	esac


Challenge #8

Change the previous script this way: If the character is Y or y display "YES". If the character is N or n display "NO". If the user enters any other character exit the script. Use the OR operator (||) for testing the lowercase y and n.

    Wel... I just did it the first time
 

Challenge #9

Create a script that takes exactly two arguments. The first argument is a shell command and the second argument is a string. The script will check if the string belongs to the output of the command.

Example: ./search_in_output.sh "ifconfig -a" "flags" will say if the string flags belongs to the output of ifconfig -a

    $ vim command_output_validator.sh

	#!/bin/bash

	if [[ $# -eq 2 ]]
	then
		output="$($1 | grep $2)"
		if [[ -n $output ]]
		then
			echo "$output"
		else
			echo "String not found in $1"
		fi
	else
		echo "This script accepts 2 arguments"
	fi

